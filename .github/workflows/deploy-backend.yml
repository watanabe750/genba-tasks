name: Deploy Backend (ECS Fargate)

on:
  push:
    branches: [ main ]
    paths:
      - "backend/**"
      - ".github/workflows/deploy-backend.yml"
  workflow_dispatch:  # Allow manual trigger from GitHub UI

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: genba-task-api
  ECS_CLUSTER: genba-task-cluster
  ECS_SERVICE: genba-tasks-backend-service
  ECS_TASK_DEFINITION: genba-task-api
  CONTAINER_NAME: api

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Docker „Ç§„É°„Éº„Ç∏„Çí„Éì„É´„ÉâÔºàAMD64„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£ÊåáÂÆöÔºâ
          docker buildx build \
            --platform linux/amd64 \
            --build-arg GIT_SHA=${{ github.sha }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --push \
            .

          # Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„Åß‰ΩøÁî®„Åô„Çã„Åü„ÇÅÂá∫Âäõ
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Verify deployment
        run: |
          echo "‚úÖ Deployment completed successfully!"
          echo "Image: ${{ steps.build-image.outputs.image }}"
          echo "Service: ${{ env.ECS_SERVICE }}"
          echo "Cluster: ${{ env.ECS_CLUSTER }}"

      - name: Health check
        run: |
          echo "üîç Checking API health endpoint..."

          # Wait for service to stabilize
          sleep 30

          # Test HTTPS endpoint
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://api.genba-tasks.com/up || echo "000")

          if [ "$RESPONSE" = "200" ]; then
            echo "‚úÖ Health check passed! API is healthy."
            echo "üåê API endpoint: https://api.genba-tasks.com"
          else
            echo "‚ö†Ô∏è  Health check returned status: $RESPONSE"
            echo "Note: Service may still be starting up. Check ECS console for details."
          fi
